import {
  ExecSyncOptionsWithStringEncoding,
  execSync as nodeExecSync,
} from 'child_process'
import { cpSync, rmSync } from 'fs'
import { dirname, resolve } from 'path'
import { chdir, exit, stdin, stdout } from 'process'
import { createInterface } from 'readline/promises'
import { fileURLToPath } from 'url'

import cuconfig from './cuconfig.json' with { type: 'json' }
import {
  gitVersion,
  packageName,
  packageVersion,
  removePackageProperty,
  updatePackageScripts,
} from './helpers.js'

const { dependencies, devDependencies, scripts } = cuconfig

function log(message: string) {
  console.log(`‚öôÔ∏è ${message}`)
}

function success(message: string) {
  console.log(`‚úÖ ${message}`)
}

function error(message: string) {
  console.error(`‚ùå ${message}`)
}

function execSync(
  command: string,
  options?: ExecSyncOptionsWithStringEncoding,
) {
  console.log(`üñ•Ô∏è Running command: ${command}`)
  return nodeExecSync(command, { stdio: 'inherit', ...options })
}

function commit({
  body,
  exitOnError = false,
  message,
}: {
  body?: string
  exitOnError?: boolean
  message: string
}) {
  try {
    const isGitInstalled = gitVersion() !== null

    if (isGitInstalled) {
      log('Committing to git...')
      execSync('git add .')
      execSync(`git commit -m "${message}" ${body ? `-m "" -m "${body}"` : ''}`)
      success('Added git commit.')
    }
  } catch {
    console.error('An error occurred while committing to git.')
    if (exitOnError) exit(1)
  }
}

export default async function app({
  name,
  options,
}: {
  name?: string
  options?: { gluestack?: boolean }
} = {}) {
  const isYarn = process.env.npm_config_user_agent?.includes('yarn')
  let appName = name
  const gluestack = options?.gluestack ?? false

  if (!name) {
    const rl = createInterface({ input: stdin, output: stdout })
    const answer = await rl.question(
      'What is the name of your app (directory name)? ',
    )
    rl.close()
    if (!answer) {
      error('The app name cannot be empty.')
      exit(1)
    }
    appName = answer
  }

  log(`Creating universal app in ${appName}...`)

  // Create new project with expo `default` template
  try {
    execSync(
      isYarn
        ? `yarn create -y expo -y ${appName}`
        : `npm create -y expo@latest -- ${appName}`,
    )
    // Change directory to new project for remaining steps
    chdir(`./${appName}`)
    // Run Expo's reset-project script then clean up
    execSync(isYarn ? 'yarn reset-project' : 'npm run reset-project')
    removePackageProperty('scripts.reset-project')
    rmSync('./scripts', { force: true, recursive: true })
    rmSync('./app-example', { force: true, recursive: true })
  } catch {
    error('The project could not be created.')
    exit(1)
  }

  commit({
    body: `Generated by ${packageName} ${packageVersion}`,
    message: `Initial commit from ${packageName}`,
  })

  success('The base template was created.')

  log('Customizing base template...')

  // Remove extra folders from expo template
  try {
    rmSync('./hooks', { force: true, recursive: true })
    rmSync('./components', { force: true, recursive: true })
    rmSync('./constants', { force: true, recursive: true })
  } catch {
    console.error('An error occurred while configuring the project.')
    exit(1)
  }

  commit({
    body: `Generated by ${packageName} ${packageVersion}`,
    message: 'Remove extra folders from expo template',
  })

  success('The base template was customized.')

  log('Updating package.json...')

  // Add config from cuconfig.json to package.json
  try {
    updatePackageScripts(scripts)
  } catch {
    console.error('An error occurred while updating package.json.')
    exit(1)
  }

  success('package.json was updated.')

  log('Installing dependencies...')

  // Install dependencies
  try {
    execSync(`npm x -y -- expo install ${dependencies.join(' ')}`)
  } catch {
    console.error('An error occurred while installing dependencies.')
    exit(1)
  }

  // Install dev dependencies
  try {
    execSync(`npm x -y -- expo install ${devDependencies.join(' ')} -- -D`)
  } catch {
    console.error('An error occurred while installing dev dependencies.')
    exit(1)
  }

  commit({
    body: `Generated by ${packageName} ${packageVersion}`,
    message: 'Install additional dependencies',
  })

  success('Dependencies were installed.')

  if (gluestack) {
    log('Installing gluestack...')

    try {
      execSync('npx gluestack-ui@latest init')
    } catch {
      console.error('An error occurred while installing gluestack.')
      exit(1)
    }

    commit({
      body: `Generated by ${packageName} ${packageVersion}`,
      message: 'Install gluestack',
    })

    success('Gluestack was installed.')

    log('Adding gluestack components...')

    // Add all available gluestack components
    try {
      execSync('npx gluestack-ui@latest add --all')
    } catch {
      console.error('An error occurred while adding gluestack components.')
      exit(1)
    }

    commit({
      body: `Generated by ${packageName} ${packageVersion}`,
      message: 'Add all available gluestack components',
    })

    success('GlueStack components were added.')
  }

  log('Copying template files...')

  // Overlay template files
  try {
    const templatePath = resolve(
      dirname(fileURLToPath(import.meta.url)),
      'template',
    )
    cpSync(templatePath, process.cwd(), { force: true, recursive: true })
  } catch {
    console.error('An error occurred while copying template files.')
    exit(1)
  }

  commit({
    body: `Generated by ${packageName} ${packageVersion}`,
    message: 'Copy template files',
  })

  success('Template files were copied.')

  log('Formatting files...')

  // Format files
  try {
    execSync(isYarn ? 'yarn format' : 'npm run format')
  } catch {
    console.error('An error occurred while formatting files.')
    // TODO: Ignore unfixable formatting errors for now
    // exit(1)
  }

  commit({
    body: `Generated by ${packageName} ${packageVersion}`,
    message: 'Format files',
  })

  success('Files were formatted.')

  // Apply patch
  try {
    const patchFilePath = resolve(
      dirname(fileURLToPath(import.meta.url)),
      'patches',
      'fix-gluestack-import.patch',
    )
    execSync(`git apply "${patchFilePath}"`)
  } catch {
    console.error('An error occurred while applying gluestack import patch.')
  }

  commit({
    body: `Generated by ${packageName} ${packageVersion}`,
    message: 'Apply gluestack import patch',
  })

  success('Gluestack import patch was applied.')

  console.log(`\nüéâ Project created in ${appName}! Run:`)
  console.log(`cd ${appName} && ${isYarn ? 'yarn' : 'npm'} start`)
}
